---
title: "Acoustic detections per sex/month/area"
execute:
  echo: false
  include: false
output:
  html_document:
    df_print: paged
    theme: readable
    toc_float: true
    toc: true
    number_sections: false
    toc_depth: 2
subtitle: analysis progress of the acoustic detections, master thesis Lotte Pohl, 27.2.2023
editor_options:
  chunk_output_type: console
knitr:
  opts_chunk: 
    collapse: true
    root.dir: "C:/Users/lotte.pohl/Documents/github_repos/ADST_Mustelus_asterias/"
format: 
  html:
    page-layout: article
    # code-tools: true
    fig-width: 8
    fig-height: 5
    toc: true
image: image.PNG
---

```{r libraries}
#| include: false
library(tidyverse)
library(lubridate)
library(leaflet)
library(tibble)
library(stringr)
library(ggsci)
library(pander)
library(mregions2)
library(fuzzyjoin)
library(sf)
library(plotly)
library("FactoMineR")
library("factoextra")
library(knitr)
library(quarto)
library(car)

```

```{r settings_knitting}

dir_path <- "C:/Users/lotte.pohl/Documents/github_repos/ADST_Mustelus_asterias"
path_envdata <- paste0(dir_path, "/03_data/environmental_layers/")
path_boundaries <- paste0(dir_path, "/03_data/marine_boundaries/")
```

```{r load_functions}
source(paste0(dir_path, "/functions.R"))
source(paste0(dir_path, "/functions/functions_DST_presstemplogs.R"))
```

```{r load_data}
source(paste0(dir_path, "/02_scripts/02_load_data/load_environmental_data.R"))
source(paste0(dir_path, "/02_scripts/02_load_data/load_human_activities.R"))
source(paste0(dir_path, "/02_scripts/02_load_data/load_marine_boundaries.R"))
source(paste0(dir_path, "/02_scripts/03_wrangle_data/wrangle_acoustic_data.R"))
```

```{r setup}
#| include: false
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

```{r general_info}
#| include: false
project_code <- "ADST-Shark"
scientific_name <- "Mustelus asterias"
masterias_recaptured_serials <- c("1293295", "1293304", "1293310", "1293312", "1293319", "1293308", "1293321", "1293322")
# bounding box
min_lon <- 0.8
max_lon <- 5
max_lat <- 53
min_lat <- 50
```

::: column-body-outset
## some info

-   Two tag serial numbers where only detected once: `r tag_serial_number_omit[1,1]` and `r tag_serial_number_omit[2,1]`, and where thus omitted.

-   Females had a mean TL of `r summary_masterias_length %>% filter(sex == "f") %>% dplyr::select(mean_length) %>% round(digits = 2) %>% pull()` cm ($\pm$ `r summary_masterias_length %>% filter(sex == "f") %>% dplyr::select(sd_length) %>% round(digits = 2) %>% pull()`, n = `r masterias_info %>% filter(sex == "f") %>% nrow()`), and males had a mean TL of `r summary_masterias_length %>% filter(sex == "m") %>% dplyr::select(mean_length) %>% round(digits = 2) %>% pull()` cm ($\pm$ `r summary_masterias_length %>% filter(sex == "m") %>% dplyr::select(sd_length) %>% round(digits = 2) %>% pull()`, n = `r masterias_info %>% filter(sex == "m") %>% nrow()`).

<!-- # Detections per sex/season -->

-   Last time, we wanted to resolve further how detections might differ between sex and season.

-   I first divided the year into summer (from 1st of April to 30th of September) and winter (rest). During the winter period, however, there was not a single detection. So I then divided the detections by month.

-   Detections range from April to October.

```{r map_releases_stations}
col_scale_areas <- c("grey","#E67D1F", "#EFC000")
# for emodnet layer
emodnet_tiles <-"https://tiles.emodnet-bathymetry.eu/2020/baselayer/web_mercator/{z}/{x}/{y}.png"
cite_emodnet <- "<a href='https://emodnet.ec.europa.eu'>EMODnet</a>"
  attr(cite_emodnet, "class") <- c("html", "character")

map_releases_stations <- leaflet::leaflet(
  # options = leaflet::leafletOptions(crs = leaflet::leafletCRS("L.CRS.EPSG4326"))
                                  ) %>%
  # ADD BASELAYERS ####
  addProviderTiles("Esri.WorldImagery", options = providerTileOptions(opacity = 0.6), group = "satellite") %>%
  leaflet::addTiles(urlTemplate = emodnet_tiles,
      # options = leaflet::tileOptions(tms = FALSE),
      attribution = cite_emodnet,
      group = "EMODnet bathymetry") %>%
  # SCALEBAR ####
  addScaleBar(position = "topright", options = scaleBarOptions(maxWidth = 250, imperial = F)) %>%
  setView(3.3, 51.5, zoom = 8) %>% 
  #### BPNS ####
  addPolygons(data = BPNS, color = col_scale_areas[1], 
              weight = 2,
              opacity = 1.0,
              fillOpacity = 0.2, 
              group = "Regions") %>%
  #### area rectangles ####
  addRectangles( #WS1
  lng1 = 3.387, lat1 = 51.365, lng2 = 3.577, lat2 = 51.513,
  fillOpacity = 0.2, weight = 2, color = col_scale_areas[2]) %>%
  addRectangles( #WS2
  lng1 = 3.656, lat1 = 51.314, lng2 = 3.859, lat2 = 51.447,
  fillOpacity = 0.2, weight = 2, color = col_scale_areas[3]) %>%
  #### submarine cables ####
  addPolylines(data = cables,
               color = "blue",
               opacity = 0.3,
               label = ~name,
               group = "wrecks, OWFs, cables") %>%
  #### windfarms ####
  addPolygons(data = windfarms_polygons %>% filter(!status %in% c("Approved", "Planned")),
              color = "red",
              weight = 2,
              opacity = 1,
              fillOpacity = 0.3,
              label = ~paste0("status: ", status, ", country: ", country, ", year: ", year),
              group = "wrecks, OWFs, cables") %>%
  #### shipwrecks ####
  addCircleMarkers(data = wrecks,
                 fillColor = "lightgreen",
                 opacity = 0,
                 fillOpacity = 1,
                 radius = 3,
                 label = ~paste0("Object: ", obj_type, ", sink year: ", sink_yr),
                 group = "wrecks, OWFs, cables") %>%
  addCircleMarkers(data = wrecks_BE %>% filter(Staat != "Geborgen"),
                   lng = ~longitude,
                   lat = ~latitude,
                   fillColor = "lightgreen",
                   opacity = 0,
                   fillOpacity = 1,
                   radius = 3,
                   label = ~paste0("Object: ", Type, ", sink date: ", sink_yr, ", status: ", Staat, ", material: ", Materiaal, ", name: ", Naam),
                   group = "wrecks, OWFs, cables") %>%
  #### ADD RELEASED TAGS ####
  addCircleMarkers(data=masterias_info,
                   lat = ~release_latitude,
                   lng = ~release_longitude,
                   weight= 0,# increase if black circle wanted
                   color = "black",
                   fillOpacity = 0.5,
                   radius = 6,
                   fillColor = "grey",
                   label = ~paste0("tag ", str_trunc(tag_serial_number, 3, "left", ellipsis = ""), " (release: ", release_dateyear, "), ", sex),
                   group = "<span style=color:grey>released tags</span>") %>%
  #### ADD STATIONS ####
  addCircleMarkers(data = close_stations,
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   fillColor = "black",
                   color = "white",
                   weight = ifelse(close_stations$Array == "offshore", 1.5, 0),
                   radius = 3,
                   opacity = 1,
                   fillOpacity = 0.8,
                   label = ~station_name,
                   highlightOptions = highlightOptions(bringToFront = TRUE),
                   group = "<span style=color:black>stations</span>") %>%
  # ADD CONTROLS #####
  leafem::addMouseCoordinates() %>%
  addLayersControl(position = "topright",
                   baseGroups = c("EMODnet bathymetry", "satellite"),
                   overlayGroups = c("<span style=color:grey>released tags</span>", "<span style=color:black>stations</span>", "wrecks, OWFs, cables"),
                   options = layersControlOptions(collapsed = FALSE)) %>%
  addLegend(position = "bottomright",
            opacity = 0.6,
            colors = col_scale_areas,
            labels = c("BPNS", "WS1", "WS2"),
            title = "Areas")

map_releases_stations
```

-   Overall, `r abs_detect_ind %>% filter(sex == "f") %>% dplyr::select(abs_ind) %>% pull()` females were detected `r abs_detect_ind %>% filter(sex == "f") %>% dplyr::select(abs_detect) %>% pull()` times and `r abs_detect_ind %>% filter(sex == "m") %>% dplyr::select(abs_ind) %>% pull()` males were detected `r abs_detect_ind %>% filter(sex == "m") %>% dplyr::select(abs_detect) %>% pull()` times.

-   I divided the study area into 3 parts: WS1 (the first array in the Westerscheldt), WS2 (the second, more east array in the Westerscheldt) and BPNS.

-   Within the BPNS, I grouped receivers more than 20 km away from the coast into offshore receivers and the ones closer than 20 km into coast receivers (analogous to Jolien Goossen's Master Thesis).

## maps

::: panel-tabset
### detections per month

-   The circle size corresponds to the number of detections from each station each month. It is relative to the total number of detections.

-   The red circles are detections of females, the blue circles are detections of males.

```{r map_detections_station_month_sex}
#| include: true
# color palette
col_fun <- ggsci::pal_locuszoom()(masterias_station_month_sex$month %>% unique() %>% length())
pal <- leaflet::colorFactor(col_fun, domain = masterias_station_month_sex$month)


map_station_month_sex_detect <- map_releases_stations %>%
  setView(3.2, 51.48, zoom = 9) %>%
  # APRIL ####
  addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 4, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#D43F3A",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#FF0000>April</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 4, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#D43F3A",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#FF0000>April</span>") %>%
    # addCircles(
    # lng = 3.72790, lat = 51.45536,
    # radius = 1,
    # label = paste0("mean monthly salinity @WS2: ", SM_salinity_summary_month %>% filter(month == 4) %>% dplyr::select(month_mean) %>% pull() %>% round(digits = 2)),
    # labelOptions = labelOptions(noHide = TRUE, textOnly = TRUE,
    #                             textsize = "12px"),
    #  group = "<span style=color:#FF0000>April</span>") %>%
  # MAY ####
     addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 5, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#EEA236",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#EEA236>May</span>") %>%
  addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 5, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#EEA236",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#EEA236>May</span>") %>%
  
  # JUNE ####
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 6, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#5CB85C",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#5CB85C>June</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 6, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#5CB85C",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#5CB85C>June</span>") %>%
  
  # JULY ####
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 7, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#46B8DA",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#46B8DA>July</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 7, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#46B8DA",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#46B8DA>July</span>") %>%
  
  # AUGUST  ####
  addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 8, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#357EBD",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#357EBD>August</span>") %>%
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 8, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#357EBD",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#357EBD>August</span>") %>%
  
  # SEPTEMBER ####
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 9, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#9632B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#9632B8>September</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 9, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#9632B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#9632B8>September</span>") %>%
  
  # OCTOBER ####
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 10, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#B8B8B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#B8B8B8>October</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 10, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~log(((100 * detections_count) / masterias_detections_clean %>% nrow()) +1) * 15,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#B8B8B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#B8B8B8>October</span>") %>%
  
  # SETTINGS ####
   addLayersControl(position = "topright",
                    baseGroups = c("EMODnet bathymetry", "satellite"),
                    overlayGroups = c("<span style=color:#FF0000>April</span>",
                                     "<span style=color:#EEA236>May</span>",
                                     "<span style=color:#5CB85C>June</span>",
                                     "<span style=color:#46B8DA>July</span>",
                                     "<span style=color:#357EBD>August</span>",
                                     "<span style=color:#9632B8>September</span>",
                                     "<span style=color:#B8B8B8>October</span>",
                                     "wrecks, OWFs, cables"),
                   options = layersControlOptions(collapsed = FALSE)) %>%
  hideGroup(c("<span style=color:#EEA236>May</span>",
              "<span style=color:#5CB85C>June</span>",
              "<span style=color:#46B8DA>July</span>",
              "<span style=color:#357EBD>August</span>",
              "<span style=color:#9632B8>September</span>",
              "<span style=color:#B8B8B8>October</span>",
              "wrecks, OWFs, cables")) %>%
  leafem::addMouseCoordinates()
# %>%
#   addLegend(position = "bottomright",
#             opacity = 0.6,
#             colors = col_scale_areas,
#             labels = c("BPNS", "WS1", "WS2"),
#             title = "Areas")

map_station_month_sex_detect
```

I got salinity data from the [`ScheldeMonitor`](https://www.scheldemonitor.org/dataproducts/en/download/periodic/explore#). They only reach until Vlissingen, unfortunately. So it roughly is the WS2 area. Below you see salinity averages. For some reason, there are no data for January, Febuary and March.

::: panel-tabset
#### salinity (per month)

```{r tablesalinity}
#| include: true
# knitr::kable(SM_salinity_summary_month)
# SM_salinity_summary_month <- SM_salinity_summary_month %>% arrange(match(month, month.name))

p_sal_month <- ggplot(SM_salinity_summary_month) +
  geom_point(aes(x = month, y = month_mean)) +
  geom_errorbar(aes(x = month, ymin = month_mean - sd, ymax = month_mean + sd), width = 0.2, alpha = 0.5) +
  theme_minimal() +
  labs(x = "Month", y = "monthly average (2018 to 2020) salinity in PSU")
plotly::ggplotly(p_sal_month)
```

#### salinity (per month & year)

```{r tablesalinity2}
#| include: true
# knitr::kable(SM_salinity_summary)
p_sal <- ggplot(SM_salinity_summary) +
  geom_point(aes(x = date, y = month_mean)) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  labs(x = "Date", y = "monthly average salinity in PSU")
plotly::ggplotly(p_sal)
```
:::

### individuals per month

-   The circle size corresponds to the number of individuals detected at a station each month. It is relative to the total number of detected individuals.

-   The red circles are detections of females, the blue circles are detections of males.

```{r map_individuals_station_month_sex}
#| include: true
# color palette
col_fun <- ggsci::pal_locuszoom()(masterias_station_month_sex$month %>% unique() %>% length())
pal <- leaflet::colorFactor(col_fun, domain = masterias_station_month_sex$month)

map_station_month_sex_ind <- map_releases_stations %>%
  # APRIL
  addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 4, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 + 2,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#D43F3A",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#FF0000>April</span>") %>%
  addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 4, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#D43F3A",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#FF0000>April</span>") %>%
  
  # MAY
     addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 5, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 + 2 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#EEA236",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#EEA236>May</span>") %>%
  addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 5, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#EEA236",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#EEA236>May</span>") %>%
  
  # JUNE
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 6, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#5CB85C",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#5CB85C>June</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 6, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 + 2 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#5CB85C",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#5CB85C>June</span>") %>%
  
  # JULY
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 7, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#46B8DA",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#46B8DA>July</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 7, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 + 2 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#46B8DA",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#46B8DA>July</span>") %>%
  
  # AUGUST
  addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 8, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 + 2 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#357EBD",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#357EBD>August</span>") %>%
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 8, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#357EBD",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#357EBD>August</span>") %>%
  
  # SEPTEMBER
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 9, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#9632B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#9632B8>September</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 9, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 + 2 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#9632B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#9632B8>September</span>") %>%
  
  # OCTOBER
    addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 10, sex == "f"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "red",
                   fillColor = "#B8B8B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#B8B8B8>October</span>") %>%
   addCircleMarkers(data = masterias_station_month_sex %>% filter(month == 10, sex == "m"),
                   lat = ~deploy_latitude,
                   lng = ~deploy_longitude,
                   weight = 3,
                   radius = ~((100 * individuals_count) / masterias_detections_clean %>% dplyr::select(tag_serial_number) %>% unique() %>% nrow())/ 1.5 + 2 ,
                   fillOpacity = 0.7,
                   opacity = 1,
                   color = "blue",
                   fillColor = "#B8B8B8",
                   label = ~paste0("month: ", month_name, ", station: ", station_name, ", (", individuals_count, " individuals, ", detections_count, " detections), ", sex),
                   group = "<span style=color:#B8B8B8>October</span>") %>%
  
  # SETTINGS
   addLayersControl(position = "topright",
                   baseGroups = c("EMODnet bathymetry", "satellite"),
                   overlayGroups = c("<span style=color:#FF0000>April</span>",
                                     "<span style=color:#EEA236>May</span>",
                                     "<span style=color:#5CB85C>June</span>",
                                     "<span style=color:#46B8DA>July</span>",
                                     "<span style=color:#357EBD>August</span>",
                                     "<span style=color:#9632B8>September</span>",
                                     "<span style=color:#B8B8B8>October</span>", "wrecks, OWFs, cables"),
                   options = layersControlOptions(collapsed = FALSE)) %>%
  hideGroup(c("<span style=color:#EEA236>May</span>",
              "<span style=color:#5CB85C>June</span>",
              "<span style=color:#46B8DA>July</span>",
              "<span style=color:#357EBD>August</span>",
              "<span style=color:#9632B8>September</span>",
              "<span style=color:#B8B8B8>October</span>",
              "wrecks, OWFs, cables"))



map_station_month_sex_ind
```
:::

```{r lengths_stat_tests}

levene <- leveneTest(length1 ~ sex, data = masterias_info) # equality of variances is met
levene$`Pr(>F)`[1]


t.test(masterias_info %>% filter(sex == "f") %>% dplyr::select(length1), masterias_info %>% filter(sex == "m") %>% dplyr::select(length1), var.equal=TRUE) # lengths are not significantly different from each other

```

## barplots

::: panel-tabset
### detections per month

```{r plot_barplot}
#| include: true
ggplot(masterias_station_month_sex, aes(x = month_name, y = detections_count, fill = area)) +
  geom_bar(position = "stack", stat = "identity") +
  facet_grid(sex ~ ., scales = "free_y", space = "free_y") +
  theme_minimal() +
  scale_y_continuous(n.breaks = 3) +
  ggsci::scale_fill_jco() +
  labs(x = "Month", y = "Detections", fill = "Area")
```

*The upper facet corresponds to females (f), the lower facet corresponds to males (m)*.

### individuals per month

```{r plot_barplot2}
#| include: true

# need to find individuals per area per month

ggplot(ind_area_month, aes(x = month_name, y = individuals_count, fill = area)) +
  geom_bar(position = "stack", stat = "identity") +
  facet_grid(sex ~ ., scales = "free_y", space = "free_y") +
  theme_minimal() +
  # scale_y_discrete() +
  scale_y_continuous(n.breaks= 2) +
  ggsci::scale_fill_jco() +
  labs(x = "Month", y = "Individuals", fill = "Area")
```

*The upper facet corresponds to females (f), the lower facet corresponds to males (m)*.
:::

## abacus plot

All detections, the colour denotes the area and the symbol denotes the sex.

```{r plot_abacus}
#| include: true
ggplot(masterias_detections_clean) +
  geom_point(mapping = aes(x = date_time, y = tag_serial_number, color = area, pch = sex),
             size = 5) +
  ggsci::scale_color_jco() +
  labs(x = "Date", y = "Tag serial number", color = "Area", pch = "Sex") +
  theme_minimal()
```

## interpretations

-   We can see that females overall dominate the detections. By tagging 19 females and 11 males, we already integrated sex bias into the dataset. This bias further increased by only 4 males in contrast to 14 females being detected by a receiver.

-   One male was detected in the WS1 area. It must have swum into the array, because the sharks tagged in the WS (5km north of Cadzand) were all female. Between May and August, males are only detected in the BPNS. In the 4 months that males were detected, it was a different male each time (tag 311 in April, 315 in May, 316 in July and tag 295 in August).

```{r investigation_males}
masterias_detections_clean %>% filter(sex == "m") %>% group_by(tag_serial_number, month, area) %>% summarise(individuals_count = tag_serial_number %>% unique() %>% length())
```

-   In September, 2 females (tag 299 and 307) are detected in the WS2 area. There are only a couple of detections (`r masterias_station_month_sex %>% ungroup() %>% filter(area == "WS2") %>% dplyr::select(detections_count) %>% sum()`, on 22.09.2019 for tag 299 and 09.09.2019 for tag 307). Both these tags were also detected in the WS1 area in September 2019, tag 299 16 days before and 3 days after the detection in the WS2 area, and tag 307 1 day before and 7 days after. So tag 299 could have stayed in WS2 for 19 days, and tag 302 for 8 days.

```{r investigation_females_WS2_WS1}

masterias_detections_clean %>% filter(area == "WS2") %>% dplyr::select(station_name, tag_serial_number, sex) %>% View()
masterias_detections_clean %>% filter(area == "WS2") %>% dplyr::select(tag_serial_number, date_time) %>% unique() %>% View()
masterias_detections_clean %>% filter(area == "WS1" & month == "9", detection_year == 19, tag_serial_number %in% c("1293299", "1293307")) %>% dplyr::select(tag_serial_number, date_time) %>% unique() %>% View()

```

## residency index (RI)

-   The **overall Residency Index** (RI) is calculated by dividing the days of acoustic detections by the estimated battery time (for the ADST-V13TP it's 518 days), for each tag.

-   The **monthly Residency Index** is calculated by dividing the days of detections in a month by the days of that month, for each tag.

-   I further subdivided the monthly RI by grouping the detections per tag and month into the three areas (WS1, WS2 and BPNS) to get a **Residency Index per area and month**.

```{r RI_calc}
# overall residency index, detected days / days of liberty
batterytime <- 518 #days, as stated on the ETN website (acoustic-archival > tags > eg. "1293296" > Field: TAG_ESTIMATED_LIFETIME)
masterias_RI_all <- masterias_detections_clean %>% group_by(tag_serial_number, sex) %>% summarise(
  release = release_dateyear %>% unique(),
  min_detect = min(detection_dateyear), 
  max_detect = max(detection_dateyear), 
  days_at_liberty = (max_detect - release) %>% as.numeric(), 
  days_detected = detection_dateyear %>% unique() %>% length(),
  RI_all = days_detected / batterytime) 
# masterias_RI_all %>% View()

# get days that an individual was detected in a certain area
masterias_RI_all <- masterias_RI_all %>% left_join(
  masterias_detections_clean  %>% mutate(count = 1) %>% group_by(tag_serial_number) %>% summarise(days_BPNS = sum(count[area == "BPNS"]), days_WS1 = sum(count[area == "WS1"]), days_WS2 = sum(count[area == "WS2"])),
  by = "tag_serial_number")

# # merge that with masterias_detections_clean
# masterias_detections_clean <- masterias_detections_clean %>% left_join(masterias_RI_all %>% dplyr::select(tag_serial_number, RI_all), by = "tag_serial_number")

# monthly RI per station
masterias_RI_month <- masterias_detections_clean %>% group_by(tag_serial_number, month_name, sex) %>%
  summarise(days_detected = detection_dateyear %>% unique() %>% length(),
            month_days = month %>% lubridate::days_in_month() %>% as.numeric() %>% unique(),
            RI_month = days_detected / month_days) 
# masterias_RI_month %>% View()

masterias_RI_month_summary <- masterias_RI_month %>% group_by(month_name, sex) %>% summarise(mean_RI_month = mean(RI_month), sd_RI_month = sd(RI_month))

masterias_RI_area <- masterias_detections_clean %>% group_by(tag_serial_number, month_name, area, sex) %>%
    summarise(days_detected = detection_dateyear %>% unique() %>% length(),
            month_days = month %>% lubridate::days_in_month() %>% as.numeric() %>% unique(),
            RI_month = days_detected / month_days) 
# masterias_RI_area %>% View()

```

```{r RI_plot_ideas}

# -------- month
# point plot
ggplot() +
  geom_point(data = masterias_RI_month,
             mapping = aes(x = month_name, y = RI_month, pch = sex, color = sex),
             size = 4) +
  geom_point(data = masterias_RI_month_summary,
             mapping = aes(x = month_name, y = mean_RI_month, color = sex),
             size = 5,
             pch = 4) +
  # scale_y_continuous(expand = c(0,0)) +
  ggsci::scale_color_nejm() +
  labs(x = "Month", y = "monthly Residency Index") +
  theme_minimal()

# line plot
ggplot(data = masterias_RI_month) +
  geom_point(mapping = aes(x = month_name, y = RI_month),
             size = 3.5) +
  # scale_y_continuous(expand = c(0,0)) +
  # ggsci::scale_color_jco() +
  theme_minimal()

# boxplot
ggplot(masterias_RI_month) +
  geom_boxplot(aes(x = month_name, y = RI_month, fill = sex)) +
  # facet_wrap(~sex) +
  ggsci::scale_fill_nejm() +
  labs(x = "monthly Residency Index") +
  theme_minimal()

#--------------- area

# RI_area
ggplot(masterias_RI_area) +
  geom_boxplot(aes(x = month_name, y = RI_month, fill = area)) +
  facet_wrap(~sex) +
  ggsci::scale_fill_jco() +
  labs(y = "monthly Residency Index", x  = "Month", fill = "Area") +
  theme_minimal()


```

::: panel-tabset
### overall RI

```{r plot_RI_overall}
#| include: true
ggplot() +
  geom_col(data = masterias_RI_all, aes(y = RI_all, x = str_trunc(tag_serial_number, 3, "left", ellipsis = ""), fill = sex)) +
  # scale_color_continuous(c("red", "blue")) +
  theme_minimal() +
  ggsci::scale_fill_nejm() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  labs(y = "overall Residency index", x = "Tag Serial Number", fill = "Sex")
```

```{r rest_RI_overall}

leveneTest(RI_all ~ sex, data = masterias_RI_all) # equality of variances is met

ifelse(leveneTest(RI_all ~ sex, data = masterias_RI_all)$`Pr(>F)`[1] > 0.05, var_equal <- FALSE, var_equal <- TRUE)

# RI_all significantly differs between males and females
t.test(masterias_RI_all %>% ungroup() %>% filter(sex == "f") %>% dplyr::select(RI_all), masterias_RI_all %>% ungroup() %>% filter(sex == "m") %>% dplyr::select(RI_all), var.equal=var_equal) # lengths are not significantly different from each other
```

### monthly RI

```{r plot_RI_month}
#| include: true
ggplot(masterias_RI_month) +
  geom_boxplot(aes(x = month_name, y = RI_month, fill = sex)) +
  # facet_wrap(~sex) +
  ggsci::scale_fill_nejm() +
  labs(y = "monthly Residency Index", x  = "Month") +
  theme_minimal()
```

### RI per area and month

<!-- * To Do: print count of individuals detected per month.* -->

```{r plot_RI_area}
#| include: true
ggplot(masterias_RI_area) +
  geom_boxplot(aes(x = month_name, y = RI_month, fill = area)) +
  facet_wrap(~sex) +
  ggsci::scale_fill_jco() +
  labs(y = "monthly Residency Index", x  = "Month", fill = "Area") +
  theme_minimal()
```

*The left facet corresponds to females (f), the right facet corresponds to males (m)*.
:::

<!-- ### Correspondance Analysis (CA) of monthly RI values -->

<!-- ```{r CA_monthly_RI} -->

<!-- data(housetasks) -->

<!-- housetasks %>% head() -->

<!-- library("gplots") -->

<!-- # 1. convert the data as a table -->

<!-- dt <- as.table(as.matrix(housetasks)) -->

<!-- # 2. Graph -->

<!-- balloonplot(t(dt), main ="housetasks", xlab ="", ylab="", -->

<!--             label = FALSE, show.margins = FALSE) -->

<!-- chisq <- chisq.test(housetasks) -->

<!-- chisq -->

<!-- res.ca <- CA(housetasks, graph = FALSE) -->

<!-- print(res.ca) -->

<!-- ``` -->

## what I plan to do now

-   Home range analysis using horizontal Kernel Utilization Distribution (KUD).

-   what kind of statistics could I do on these data? I would like to see if there are significant differences between sex, area and month (could also be grouped into season, i.e. early/mid/late summer). I am not sure how to proceed, because we have different n for males and females, and overall a very small number of individuals. Do you have a statistical method in mind that could come in handy in this case?

-   In her master thesis, Jolien Goossens did a Correspondance Analysis (CA) on her monthly Residency Indices. What do you think of doing that here as well?

-   I have started the `actel` analysis and want to also use the `RSP` package which does home range analysis. <!-- * I have wanted to analyse the dataset using the R packages *actel* [https://doi.org/10.1111/2041-210X.13503](https://doi.org/10.1111/2041-210X.13503) and *RSP* [https://doi.org/10.1111/2041-210X.13484](https://doi.org/10.1111/2041-210X.13484) for some weeks now. This would be my next step for the acoustic detection data. -->

-   Overall, I would like to look at environmental variables (salinity, temperature, pH, ...) and try to infer correlations with shark detections with a GLMM. But that would be 2nd priority after the home range analysis.
:::
